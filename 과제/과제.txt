(1)
ConcurrentModificationException 가 일어나는 원인
어떤 쓰레드가 iterator가 반복중인 Collection을 수정하는 경우에 발생된다. 어떤 쓰레드는 현재 반복문이 실행할 수 있고 전혀 다른 쓰레드일 수도 있다.
예를들어 
List<int> index = new ArrayList<>();
index.add(1);
index.add(2);
index.add(3);
index.add(4);
index.add(5);
for(int i : index){
index.remove(i)
}
for -each문은 iterator를 사용하게된다. 반복문 내부에서 add/remove 등 과 같이 리스트를 수정하는 오퍼레이션을 하는경우 
ConcurrentModificationException 가 발생하게 된다.
왜 ConcurrentModificationException 발생시키는 걸까?
index.add(1);
index.add(2);
index.add(3);
index.add(4);
index.add(5);
for(int i : index){
index.add(i)
}
라고 가정할 경우 
이 for loop는 무한 반복이 되어 빠져나올수가 없다.
이렇기 때문에 ConcurrentModificationException가 발생시키는 것이다.
ConcurrentModificationException을 막는방법은 여러가지가 있다.
1.조건 으로 탈출
for(int i = 0; i < index.size(); i++) {
if( i == 1 ) {
list.remove(i);
 }
}
이렇게 if문을 통하여 조건을 붙여주면 해결 할 수 있다.
2.CopyOnWriteArrayList 사용하기
List<int> index = new CopyOnWriteArrayList<>();
선언후 
for( int i : index) {
     if (i==1) {
          index.remove(i);
     }
}
로 사용이 가능하다.
3.iterator를 사용하기
List<int> index = new ArrayList<>();
Iterator<int> ite =index.iterator();
선언후
while(ite.hasNext()){
int i = ite.next();
if(i==1){
ite.remove();
}
}
으로 사용가능하다.
(2)
ValueAnimator:애니메이션의 주요 타이밍 엔진으로 애니메이션으로 보여줄 속성 값을 계산하고 애니메이션의 타이밍 세부정보, 반복여부, 업테이트 이벤트 수신 을 설정하고 기능을 포함한다.
ValueAnimator animation = ValueAnimator.ofFloat(0f, 100f); //0~100사이의 애니메이션 값을 계산
animation.setDuration(1000); //1000ms 기간동안
animation.start();//시작한다.
즉 ValueAnimator는 start()를 실행할때 1000ms 기간동안 0~100 사이의 애니메이션 값을 계산하기 위해 시작한다. 라고 할수있다.
다른 사용방법으로
ValueAnimator animation = ValueAnimator.ofObject(new MyTypeEvaluator(), startPropertyValue, endPropertyValue);
animation.setDuration(1000);
animation.start();
생성과  value값을 통해 만들수 있다.
ObjectAnimator:ValueAnimator의 서브클래스 이다. ObjectAnimator클래스는 애니메이션의 새 값을 계산할 때 사용한다.
ValueAnimator과 차이점은 ObjectAnimator클래스는 타겟 객체에 특정 접근자 메서드가 있어야 하는 추가적인 제한 사항이 있다.
ObjectAnimator를 사용하는 이유는  ValueAnimator의 값 계산을 조합하며 타겟 객체의 이름 지정된 속성을 애니메이션화하는 기능이 있다. 그러면 애니메이션 속성이 자동으로 업데이트되므로 더 이상 ValueAnimator.AnimatorUpdateListener를 구현할 필요가 없기 때문에 객체를 애니메이션으로 보여주기가 훨씬 쉬워 진다.
특정 접근자 메서드는 무엇인가?
ObjectAnimator를 인스턴스화하는 작업은 ValueAnimator와 비슷하지만 애니메이션할 값 범위와 함께 객체와 객체의 속성 이름(문자열)도 지정한다.
ObjectAnimator animation = ObjectAnimator.ofFloat(textView, "translationX", 100f);
animation.setDuration(1000);
animation.start();
ValueAnimator과 다른점으로 문자열이 추가 되었다.
(3)
2D그래픽스와 3x3행렬의 관계는 다음과 같다.
먼저 2차원의 변환 행렬을 알아야 한다.
2차원 변환 행렬은 이동,반사,신축,회전이 있다.
이동
2차원 평면에서 객체의 모양은 변하지 않고 객체의 일정거리만큼 다른 위치로 옮기는 변환이다.
x=x+tx ,y=y+ty
반사
2차원 평면에서 x또는 y의 값의 부호를 반대로 한 변환이다.
x=-x ,y=y 또는 x=x ,y=-y
신축
2차원 평면에서 x또는 y의 값의 확대 또는 축소가 되는 변환이다. 기준점이 있어야한다. 기준점을 중심으로 확대 또는 축소를 하게 된다.
x=ax ,y=ay
회전
2차원 평면에서 객체를 회전하여 나오는 값이다. 기준점이 있어야 하며 기준점을 중심으로 회전을 하게 된다.
x=rcos(a+b)=rcos(a)cos(b) - rsin(a)sin(b) = xcos(b)-ysin(b)
y=rsin(a+b)=ros(a)sin(b) + rsin(a)cos(b)=xsin(b)+ycos(b)
2차 방정식은 행렬로 변환이 가능하다.
위 2차 방성식중 회전을 예시로 행렬 변환을 한다면

라는 식이 나온다.
그럼 2D그래픽스와 3x3행렬은 무슨 관계가 있을까.
좌표이동은
2x2행렬은 덧셈으로만 연산이 가능하다. 
하지만 3x3 행렬을 이용하면 
  라는 식을 만들고 다른 변환식이랑 계산할때 곱셈으로 연산할 수 있다.
곱연산으로 할경우 연산을 통일화 할수 있기 때문에 사용한다.