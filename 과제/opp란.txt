1. OOP란? object oriented programming 으로
객체지향 프로그래밍을 의미한다.
객체: 객관적으로 존재하는 실체를 의미하고 
지향: 위주, 주되는 것으로 삼는 것을 의미한다.
즉 객체지향은 객체 위주라는 뜻이다.

객체지향 키워드는 클래스(class),오브젝트(object),캡슐화(Encapsulation),상속성(Inheritance),다형성(Polymorphism) 이 있다.

클래스(class)는 추상(abstract)을 의미하며 이는 표현 대상의 특징에 대한 서술을 말한다.
추상은 사용자가 구체적인 내용을 생각하지 않고도 사용할 수 하는 기능을 말한다.

오브젝트는 실체(instance)를 의미하며 클래스가 실체로 만들어진 것의 의미하고 있다.
오브젝트는 클래스의 인스턴스(instance)이다.(object는 instance of class이라고 말한다)
클래스가 실체로 만들어진 것이다.

다음 세가지 특성을 지원하는 언어를 객체지향 프로그래밍이라고 한다.
① 캡슐화(encapsulation)
② 상속성(inheritance)
③ 다형성(polymorphism)

캡슐화는 데이터와 데이터를 다루는 방법을 묶는것이다 (data+operation on data)
관련 있는 것을 묶어서 이름을 부여하는 것이다.

상속성은 하나의 클래스가 가지고 있는 특징들을 그대로 다른 클래스가 물려 받는것이다.
상속성은 계보(계층)을 의미하기도 한다.
기존 클래스와 구분되는 특징만 기술하여 추가한다.
이는 재사용과 유연성을 가지고 있다.

다형성은 상속성의 계층을 따라서 각각의 클래스에 한가지 이름을 줄 수 있는것
상속성의 계층을 따라서 각 클래스에 동일한 이름의 메소드를 사용할 수 있는것
같은 명령을 각기 다른 오브젝트에 줄 수 있다.

특징을 정리하면
캡슐화:data operation on data
상속성: 상속계층을 따라 특성(data,operation)을 공유
다형성:다양한 형태에 동일한 명령을 사용

객체지향의 장점
객체지향의 장점은 7개가 있다.
자연스러운 모델링,생산성 향상,점진적 개발,견고한 의미적 모델링, 명확한 인터페이스 기술, 보안, 유지보수의 용의성이 있다.

2-1 CamelCase
CamelCase는 단어의 첫글자를 대문자로 사용한다. 식별자의 모양이 마치 낙타모양 같아서 붙혀진이름이라고 한다.
CamelCase는 두가지 분류로 나타난다.
1. UpperCamelCase
UpperCamelCase 같은경우 첫글자 부터 대문자로 사용하는 방식이다.
2. lowerCamelCase
lowerCamelCase 같은경우 첫글자는 소문자 그후 다음 단어의 첫글자는 대문자로 사용하는 방식이다.

2-2 snake_case
snake_case는 각 단어의 공백을 "_"(언더바)로 바꾸고 모든 단어를 소문자로 사용한다.

2-3 ALL_CAPS_UNDERSCORE
ALL_CAPS_UNDERSCORE는 모든 공백을"_"(언더바)로 바꾸고 모든 문자를 대문자로 변환한다.


UpperCamelCase을 사용하는 경우
Type Names,Interface Name이 있다.

lowerCamelCase을 사용하는 경우
Method Names,Variable Name이 있다.

ALL_CAPS_UNDERSCORE을 사용하는 경우
Constant Names가 있다.

snake_case을 사용하는 경우
python을 중심으로
Method Names,instance variable이 있다.
출처:https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables

또한 다양한 케이스가 있으며
이런 언어 테이블은 각 언어마다 다를수 있다.

3.본인이 사용한 방식과 다른점
본인이 사용한 방식은 UpperCamelCase,lowerCamelCase,snake_case을 혼합해서 사용한다.
예를 들어 class명을 My_house라고 하기도 하며 변수를 position이라고 소문자만 사용하거나
함수명을  move()을 쓰거나 Move()등 대문자 소문자 case상관없이 사용하고 있다.
이 코딩컨벤션과 많이 다르고 정리가 안되어있는 코딩을 하고있다.